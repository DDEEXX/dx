<?php
/**
 * Created by PhpStorm.
 * User: root
 * Date: 07.01.19
 * Time: 12:13
 */

require_once(dirname(__FILE__)."/sqlDataBase.class.php");
require_once(dirname(__FILE__)."/managerDevices.class.php");
require_once(dirname(__FILE__).'/globalConst.interface.php');

interface iUnit{
}

abstract class unit implements iUnit {

    protected $device = null;
    protected $id = 0;
    protected $type = typeUnit::NONE;

    /**
     * unit constructor.
     */
    public function __construct($type, $id, array $device)
    {
        $this->type = $type;
        $this->id = $id;
        $this->device = managerDevices::createDevice($device);
    }

    public function __destruct()
    {
        unset($this->device);
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

}

class sensorUnit extends unit
{

    protected $valueTable = 0;

    /**
     * @return int|mixed
     */
    public function getValueTable()
    {
        return $this->valueTable;
    }

    /**
     * sensorUnit constructor.
     */
    public function __construct(array $options, $type)
    {
        $sel = new selectOption();
        $sel->set('DeviceID', $options['DeviceID']);
        $arr = DB::getListDevices($sel);
        parent::__construct($type, $options['UnitID'], $arr[0]);
        $this->valueTable = $options['ValueTableID'];
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}

class moduleUnit extends unit
{

}

class iButtonUnit extends unit
{

}

class temperatureUnit extends sensorUnit {

    private $delta = 0;

    public function __construct(array $options) {
        parent::__construct($options, typeUnit::TEMPERATURE);
        $this->delta = $options['Delta'];
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    /**
     * Считать температуру непосредственно с физического датчика
     * @return mixed
     */
    public function getValue()
    {
        return $this->device->getValue();
    }

    /**
     * Записать значение температуры в базу данных
     * время записи берется текущее серверное
     * @param $value
     */
    public function writeValue($value)
    {

        if (!is_double($value) && !is_int($value)) {
            //Пишем лог
            return;
        }

        $delta = $this->delta;
        $temperature = $value + $delta;
        $uniteID = $this->id;
        $nameTabValue = 'tvalue_'.$this->valueTable;

        $query = 'INSERT INTO '.$nameTabValue.' VALUES (NULL, '."$uniteID, SYSDATE(), ".$temperature.')';

        $con = sqlDataBase::Connect();

        $result = queryDataBase::execute($con, $query);

        unset($con);

        if (!$result) {
            //Пишем лог

        }

    }

    /**
     * Получить последнюю температуру из базы данных
     *
     */
    public function readValue()
    {
        $value = DB::getLastValueUnit($this);
        return $value;
    }

    public function getTemperatureForInterval($dateFrom = null, $dateTo = null, $grType = graphType::line) {

        //Конечная дата
        $date_to = "'".$dateTo."'";
        //Если конечная дата не задана, используем настоящее время
        if ( empty($dateTo) ) {
            $date_to = "NOW()";
        }

        //Обрабатываем начальную дату
        $date_from = $dateFrom;
        $date_format = "DATE_FORMAT(Date, '%d.%m')";

        if ( empty($dateFrom) || $dateFrom == 'day') {
            $date_from = "($date_to - INTERVAL 1 DAY)";
            $date_format = "DATE_FORMAT(Date, '%H:%i')";
        }
        elseif ( $dateFrom == "week" ) {
            $date_from = "($date_to - INTERVAL 7 DAY)";
            $date_format = "DATE_FORMAT(Date, '%d.%m')";
        }
        elseif ( $dateFrom == "month" ) {
            $date_from = "($date_to - INTERVAL 1 MONTH)";
            $date_format = "DATE_FORMAT(Date, '%d.%m')";
        }

        $id = $this->getId();
        $nameTabValue = 'tvalue_'.$this->valueTable;

        $query = "SELECT Value, $date_format Date_f FROM ".$nameTabValue." WHERE UnitID=".$id." AND Date>=$date_from AND Date<=$date_to ORDER BY Date";

        $con = sqlDataBase::Connect();

        $result = queryDataBase::getAll($con, $query);

        unset($con);

        return $result;

    }

}

class keyInUnit extends sensorUnit {

    public function __construct(array $options) {
        parent::__construct($options, typeUnit::KEY_IN);
    }

    public function __destruct()
    {
        parent::__destruct(); // TODO: Change the autogenerated stub
    }

    /**
     * Считать значение непосредственно с физического датчика
     * @return mixed
     */
    public function getValue()
    {
        if (!is_null($this->device)) {
            return $this->device->getValue();
        }
        else {
            return null;
        }
    }

}